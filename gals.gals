#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = false
ScannerTable = Compact
Input = String
Parser = LL
#RegularDefinitions
L : [a-zA-Z]
N : [0-9]
INT : {N}+
REAL : {INT}"."{INT}*|{INT}*"."{INT}
EXP : (E|e)("+"|"-")NN+
CC : [\ \t\n\r\s ]
CL : "#".*{CC}*
CB : "/*"([^"*"]|"*"[^"/"])*"*/"
#Tokens
id : ({L}(@|_({L}|{N})|{L}|{N})*(@|_)?|@(({L}|{N})+(@|_))*({L}|{N})*)({L}|{N})*
literal : ('.*')*
num_int : ({INT}{EXP}?)
num_real : ({REAL}{EXP}?)
:{CC}
:{CL}
:{CB}
//Simples
";"
","
"."
">"
"<"
"="
"("
")"
"["
"]"
"+"
"-"
"*"
"/"
":"
//Simples Analisador sintatico
"}"
"{"
//duplos
":="
".."
"<>"
"<="
">="

programa = id :  "programa"
inteiro = id : "inteiro"
real = id : "real"
const = id :"const"
booleano =  id : "booleano"
caracter = id : "caracter"
cadeia = id : "cadeia"
metodo = id : "metodo"
ref = id : "ref"
val = id : "val"
se = id : "se"
entao = id : "entao"
enquanto = id : "enquanto"
faca = id : "faca"
leia = id : "leia"
escreva = id : "escreva"
retorne = id : "retorne"
senao = id : "senao"
ou = id : "ou"
div = id : "div"
e = id : "e"
nao = id : "nao"
falso = id : "falso"
verdadeiro = id : "verdadeiro"


//
#NonTerminals
<programa>
<bloco>
<com_composto>
<comando>
<constante>
<constante_explicita>
<dcl_metodo>
<dcl_metodos>
<dcl_var_const>
<dimensao>
<expressao>
<expsimp>
<fator>
<fator_const>
<lid>
<lista_expr>
<mp_par>
<op_add>
<op_mult>
<oprel>
<par_formais>
<rcomid>
<rep_expsimp>
<rep_lexpr>
<rep_lid>
<rep_par>
<rep_termo>
<replistacomando>
<resto_expressao>
<rvar>
<senaoparte>
<termo>
<tipo>
<tipo_metodo>
#Grammar
<programa> ::= programa id #101 ";" <bloco> ".";
<bloco> ::= <dcl_var_const> <dcl_metodos> <com_composto>; 
<dcl_var_const> ::= <tipo> <dimensao> #102 <lid> #103 <fator_const> #104 ";" <dcl_var_const> | î ;
<tipo> ::= inteiro #105 | real #106 | booleano #107 | caracter #108 | cadeia "[" <constante> #109 "]";
<dimensao> ::= #110 "[" <constante> #111 "]" | #112 î;
<lid> ::= id #113 <rep_lid>; 
<rep_lid> ::= "," <lid> | î;
<fator_const> ::= #114 "=" <constante> #115 | #116 î;
<dcl_metodos> ::= <dcl_metodo> ";" <dcl_metodos> | î;
<dcl_metodo> ::= metodo id #117 <par_formais> #118 <tipo_metodo> #119 ";" <bloco> #120;
<par_formais> ::= "(" <mp_par> #121 <lid> #122 ":" <tipo> #123 <rep_par> ")" | î ;
<rep_par> ::= ";" <mp_par> #121 <lid> #122 ":" <tipo> #123 <rep_par> | î;
<tipo_metodo> ::= ":" <tipo> #124 | î #125;
<mp_par> ::= ref #126 | val #127;
<com_composto> ::= "{" <comando> <replistacomando> "}";
<replistacomando> ::= ";" <comando> <replistacomando> | î;
<comando>::= id #128 <rcomid> | <com_composto> | se <expressao> #129 entao <comando> <senaoparte> | enquanto <expressao> #129 faca <comando> | leia "(" #130 <lid> ")" | escreva "(" #131 <lista_expr> ")" | retorne <expressao> #132 | î;
<senaoparte> ::= senao <comando> | î;
<rcomid>::= #133 ":=" <expressao> #134 | "[" #135 <expressao> #136 "]" ":=" <expressao> #134 |"(" #137 #138 <lista_expr> ")" #139 | î #140;
<lista_expr> ::= <expressao> #141 <rep_lexpr>;
<rep_lexpr> ::= "," <expressao> #141 <rep_lexpr> | î;
<expressao> ::= <expsimp> #142 <resto_expressao>;
<resto_expressao> ::= <oprel> <expsimp> #143 | î;
<oprel> ::= "=" #144 |"<" #145 | ">" #146 | ">=" #147 | "<=" #148| "<>" #149;
<expsimp> ::= <termo> #150 <rep_expsimp>;
<rep_expsimp> ::= <op_add> #151 <termo> #152 <rep_expsimp> | î;
<op_add> ::= "+" #153 | "-" #154 | ou #155;
<termo> ::= <fator> #156 <rep_termo>;
<rep_termo> ::= <op_mult> #157 <fator> #158 <rep_termo> | î;
<op_mult> ::= "*" #159 |"/" #160 | e #161 | div #162;
<fator> ::= nao #163 <fator> #164 | "-" #165 <fator> #166 | "(" #167 <expressao> ")" #168| id #128 <rvar> #169| <constante_explicita> #170;
<rvar> ::= "(" #171 <expressao> #141 <rep_lexpr> ")" #172 | "[" #135 <expressao> #173 "]" | î #174;
<constante> ::= id #175 | <constante_explicita>;
<constante_explicita> ::= num_int #176| num_real #177 | falso #178 | verdadeiro #179 | literal #180;
